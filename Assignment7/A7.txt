Javier Pascal Flores A01375925

A
#include <stdio.h>
#include <stdlib.h>

int gcd(int a, int b)
{
    if (a == 0)
        return b;
    if (b == 0)
        return a;
    if (a == b)
        return a;
    if (a > b)
        return gcd(a - b, b);
    else
    {
        return gcd(a, b - a);
    }
}

typedef struct
{
    int numerator;
    int denominator;
} Fraction;

Fraction* SimplifyFraction(const Fraction* const fraction){
    int n = fraction -> numerator;
    int d = fraction->denominator;
    int greatestCommonDenominator = gcd(n, d);
    Fraction *simp = malloc(sizeof(Fraction));
    simp -> numerator = n / greatestCommonDenominator;
    simp -> denominator = d / greatestCommonDenominator;
    return simp;
}



int main()
{
    int n, d;
    scanf("%d\n%d", &n, &d);
    Fraction *fraction = malloc(sizeof(Fraction));
    fraction -> numerator = n;
    fraction -> denominator = d;
    Fraction *simp = SimplifyFraction(fraction);
    free(fraction);
    printf("%d\n%d\n", simp -> numerator, simp -> denominator);
    free(simp);
    return 0;
}

B

#include <stdio.h>
#include <stdlib.h>

int gcd(int a, int b)
{
    if (a == 0)
        return b;
    if (b == 0)
        return a;
    if (a == b)
        return a;
    if (a > b)
        return gcd(a - b, b);
    else
    {
        return gcd(a, b - a);
    }
}

typedef struct
{
    int numerator;
    int denominator;
} Fraction;

Fraction *SimplifyFraction(const Fraction *const fraction)
{
    int n = fraction->numerator;
    int d = fraction->denominator;
    int greatestCommonDenominator = gcd(n, d);
    Fraction *simp = malloc(sizeof(Fraction));
    simp->numerator = n / greatestCommonDenominator;
    simp->denominator = d / greatestCommonDenominator;
    return simp;
}

Fraction *SumFraction(const Fraction *const f1, const Fraction *const f2)
{
    int n1 = f1->numerator;
    int d1 = f1->denominator;
    int n2 = f2->numerator;
    int d2 = f2->denominator;
    Fraction *sum = malloc(sizeof(Fraction));
    sum->numerator = (n1 * d2) + (d1 * n2);
    sum->denominator = d1 * d2;
    Fraction *sumSimp = SimplifyFraction(sum);
    return sumSimp;
}

int main()
{
    int n1,d1,n2,d2;
    scanf("%d\n%d\n%d\n%d",&n1,&d1,&n2,&d2);
    Fraction *f1 = malloc(sizeof(Fraction));
    Fraction *f2 = malloc(sizeof(Fraction));
    f1 -> numerator = n1;
    f1 -> denominator = d1;
    f2 -> numerator = n2;
    f2 -> denominator = d2;
    Fraction *res = SumFraction(f1,f2);
    free(f1);
    free(f2);
    printf("%d\n%d\n",res -> numerator, res -> denominator);
    free(res);
    return 0;
}

C

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct Point3D
{
    int x;
    int y;
    int z;
} Point3D;

double euclidianDistance(const Point3D *const p1, const Point3D *const p2)
{
    double powX = pow(p1->x - p2->x, 2);
    double powY = pow(p1->y - p2->y, 2);
    double powZ = pow(p1->z - p2->z, 2);
    double res = sqrt(powX + powY + powZ);
    return res;
}

int main()
{
    int x1, y1, z1, x2, y2, z2;
    scanf("%d\n%d\n%d\n%d\n%d\n%d", &x1, &y1, &z1, &x2, &y2, &z2);
    Point3D *p1 = malloc(sizeof(Point3D));
    Point3D *p2 = malloc(sizeof(Point3D));
    p1->x = x1;
    p1->y = y1;
    p1->z = z1;
    p2->x = x2;
    p2->y = y2;
    p2->z = z2;
    printf("%.2f", euclidianDistance(p1, p2));
    free(p1);
    free(p2);
    return 0;
}

D

#include <stdio.h>
#include <stdlib.h>

typedef struct {
    float x;
    float y;
}Point2D;

int quadrant(const Point2D* const point){
    if(point ->x > 0 && point ->y > 0){
        return 1;
    }else if (point ->x < 0 && point ->y > 0){
        return 2;
    }else if (point -> x < 0 && point ->y < 0){
        return 3;
    }else if(point ->x > 0 && point ->y < 0){
        return 4;
    }else{
        return 0;
    }
}

void main(){
    float x1,y1;
    scanf("%f\n%f",&x1,&y1);
    Point2D *p = malloc(sizeof(Point2D));
    p -> x = x1;
    p -> y = y1;
    printf("%d",quadrant(p));
    free(p);
}

E

#include <stdio.h>
#include <stdlib.h>

typedef struct
{
    int x;
    int y;
} Point2D;

Point2D *SwapAndNegate(const Point2D *const point)
{
    int x, y, temp;
    x = point->x;
    y = point->y;
    temp = x;
    x = y * -1;
    y = temp * -1;
    Point2D *result = malloc(sizeof(Point2D));
    result->x = x;
    result->y = y;
    return result;
}
void main()
{
    int x1, y1;
    scanf("%d\n%d", &x1, &y1);
    Point2D *p = malloc(sizeof(Point2D));
    p->x = x1;
    p->y = y1;
    Point2D *res = SwapAndNegate(p);
    free(p);
    printf("%d\n%d", res->x, res->y);
    free(res);
}

F

#include <stdio.h>
#include <stdlib.h>

typedef struct
{
    int x;
    int y;
} Point2D;

double ComputeSlope(const Point2D *const point1, const Point2D *const point2)
{
    double numerator = point2->y - point1->y;
    double denominator = point2->x - point1->x;
    return numerator / denominator;
}

void main()
{
    int x1, y1, x2, y2;
    scanf("%d\n%d\n%d\n%d", &x1, &y1, &x2, &y2);
    Point2D *p1 = malloc(sizeof(Point2D));
    Point2D *p2 = malloc(sizeof(Point2D));
    p1->x = x1;
    p1->y = y1;
    p2->x = x2;
    p2->y = y2;
    printf("%.1f", ComputeSlope(p1, p2));
    free(p1);
    free(p2);
}

G


#include <stdio.h>
#include <stdlib.h>

typedef struct
{
    int x;
    int y;
} Point2D;

double ComputeSlope(const Point2D *const point1, const Point2D *const point2)
{
    double numerator = point2->y - point1->y;
    double denominator = point2->x - point1->x;
    return numerator / denominator;
}

int AreCollinear(const Point2D *const point1, const Point2D *const point2, const Point2D *const point3)
{
    int slope1, slope2, slope3;
    slope1 = round(ComputeSlope(point1, point2));
    slope2 = round(ComputeSlope(point2, point3));
    slope3 = round(ComputeSlope(point1, point3));
    if (slope1 == slope2 && slope2 == slope3)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
void main()
{
    int x1, y1, x2, y2, x3, y3;
    scanf("%d\n%d\n%d\n%d\n%d\n%d", &x1, &y1, &x2, &y2, &x3, &y3);
    Point2D *p1 = malloc(sizeof(Point2D));
    Point2D *p2 = malloc(sizeof(Point2D));
    Point2D *p3 = malloc(sizeof(Point2D));
    p1->x = x1;
    p1->y = y1;
    p2->x = x2;
    p2->y = y2;
    p3->x = x3;
    p3->y = y3;
    printf("%d", AreCollinear(p1, p2, p3));
    free(p1);
    free(p2);
    free(p3);
}

H

#include <stdlib.h>
#include <stdio.h>

typedef struct
{
    int x, y, width, height;
} Rectangle;

typedef struct
{
    int x;
    int y;
} Point2D;

int RectangleContainsPoint(const Rectangle *const rec, const Point2D *const point)
{
    int rightEdge, absBotEdge;
    rightEdge = rec->x + rec->width;
    absBotEdge = rec->y + rec->height;
    if ((point->x <= rightEdge && point->x >= rec->x) && (point->y <= absBotEdge && point->y >= rec->y))
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
void main()
{
    int x, y, width, height, px, py;
    scanf("%d\n%d\n%d\n%d\n%d\n%d", &x, &y, &width, &height, &px, &py);
    Rectangle *rectangle = malloc(sizeof(Rectangle));
    Point2D *point = malloc(sizeof(Point2D));
    rectangle->x = x;
    rectangle->y = y;
    rectangle->width = width;
    rectangle->height = height;
    point->x = px;
    point->y = py;
    printf("%d", RectangleContainsPoint(rectangle, point));
    free(rectangle);
    free(point);
}


I

#include <stdio.h>
#include <stdlib.h>

typedef struct
{
    int x, y, width, height;
} Rectangle;

Rectangle *UniteRectangles(const Rectangle *const r1, const Rectangle *const r2)
{
    int x, y, width, height;
    int xMax1, xMax2, yMax1, yMax2;

    if (r1->x <= r2->x)
    {
        x = r1->x;
    }
    else
    {
        x = r2->x;
    }
    if (r1->y <= r2->y)
    {
        y = r1->y;
    }
    else
    {
        y = r2->y;
    }
    xMax1 = r1->x + r1->width;
    xMax2 = r2->x + r2->width;
    yMax1 = r1->y + r1->height;
    yMax2 = r2->y + r2->height;
    if (xMax1 <= xMax2)
    {
        width = xMax2 - x;
    }
    else
    {
        width = xMax1 - x;
    }
    if (yMax1 <= yMax2)
    {
        height = yMax2 - y;
    }
    else
    {
        height = yMax1 - y;
    }
    Rectangle *res = malloc(sizeof(Rectangle));
    res->x = x;
    res->y = y;
    res->width = width;
    res->height = height;
    return res;
}

void main()
{
    int x1, y1, w1, h1;
    int x2, y2, w2, h2;
    scanf("%d\n%d\n%d\n%d", &x1, &y1, &w1, &h1);
    scanf("%d\n%d\n%d\n%d", &x2, &y2, &w2, &h2);
    // Memory Allocation
    Rectangle *rec1 = malloc(sizeof(Rectangle));
    Rectangle *rec2 = malloc(sizeof(Rectangle));
    // Rectangle 1
    rec1->x = x1;
    rec1->y = y1;
    rec1->width = w1;
    rec1->height = h1;
    // Rectangle 2
    rec2->x = x2;
    rec2->y = y2;
    rec2->width = w2;
    rec2->height = h2;
    // Calculation
    Rectangle *res = UniteRectangles(rec1, rec2);
    // Free Memory
    free(rec1);
    free(rec2);
    printf("%d\n%d\n%d\n%d", res->x, res->y, res->width, res->height);
    free(res);
}

J

#include <stdio.h>
#include <stdlib.h>

typedef struct
{
    int x, y, width, height;
} Rectangle;

Rectangle *IntersectRectangles(const Rectangle *const r1, const Rectangle *const r2)
{
    int x, y, width, height;
    int xMax1, xMax2, yMax1, yMax2;

    if (r1->x >= r2->x)
    {
        x = r1->x;
    }
    else
    {
        x = r2->x;
    }
    if (r1->y >= r2->y)
    {
        y = r1->y;
    }
    else
    {
        y = r2->y;
    }
    xMax1 = r1->x + r1->width;
    xMax2 = r2->x + r2->width;
    yMax1 = r1->y + r1->height;
    yMax2 = r2->y + r2->height;
    if (xMax1 <= xMax2)
    {
        width = xMax1 - r2->x;
    }
    else
    {
        width = xMax2 - r1->x;
    }
    if (yMax1 <= yMax2)
    {
        height = yMax1 - r2->y;
    }
    else
    {
        height = yMax2 - r1->y;
    }
    Rectangle *result = malloc(sizeof(Rectangle));
    result->x = x;
    result->y = y;
    result->width = width;
    result->height = height;
    return result;
}

void main()
{
    int x1, y1, width1, height1;
    int x2, y2, width2, height2;
    scanf("%d\n%d\n%d\n%d", &x1, &y1, &width1, &height1);
    scanf("%d\n%d\n%d\n%d", &x2, &y2, &width2, &height2);
    Rectangle *r1 = malloc(sizeof(Rectangle));
    Rectangle *r2 = malloc(sizeof(Rectangle));
    r1->x = x1;
    r1->y = y1;
    r1->width = width1;
    r1->height = height1;
    r2->x = x2;
    r2->y = y2;
    r2->width = width2;
    r2->height = height2;
    Rectangle *res = IntersectRectangles(r1, r2);
    free(r1);
    free(r2);
    printf("%d\n%d\n%d\n%d", res->x, res->y, res->width, res->height);
    free(res);
}
