#include "stdio.h"
#include <stdlib.h>
#define SIZE 10

int main(void) {
    unsigned int h[SIZE] = {0};
    scanf("%u%u%u%u%u%u%u%u%u%u", &h[0], &h[1], &h[2], &h[3], &h[4], &h[5], &h[6], &h[7],&h[8], &h[9]);
    for(int i=0; i<SIZE;i++){
        for(int j=0;j<h[i];j++){
            printf("b");
        }printf("\n");
    }
    return 0;
}   


#include "stdio.h"
#define SIZE 10

int main(void) {
    unsigned int h[SIZE] = {0};
    scanf("%u%u%u%u%u%u%u%u%u%u", &h[0], &h[1], &h[2], &h[3], &h[4], &h[5], &h[6], &h[7], &h[8], &h[9]);
    float acum=0.0;
    for(int i=0;i<SIZE;i++){
        acum+=h[i];
    }
    printf("%.1f",acum/SIZE);
    return 0;
}


#include "stdio.h"

/* ArrayMode */

int computeMode(unsigned int arr[], int size){

    int maxValue = 0, maxCount = 0;
    

   for (int i = 0; i < size; ++i) {
      int count = 0;
      
      for (int j = 0; j < size; ++j) {
         if (arr[j] == arr[i])
         count++;
      }
      
      if (count > maxCount) {
         maxCount = count;
         maxValue = arr[i];
      }
   }

   return maxValue;


}


int main(){
    int size;
    scanf("%d",&size);
    unsigned int arr[size];    
    for(int i=0;i<size;i++){
        scanf("%d",&arr[i]);
    }
    printf("%d",computeMode(arr, size));   
    return 0; 
}


d

#include "stdio.h"

/* ArrayMax
Create a program to read a variable number of elements, 
store them in the array a, passes a to the function computeMax which 
computes the maximun number iterating over the array, and then, the
 program prints the result of computeMax.
 */

int computeMax(int *list, int size)
{
   int max = list[0];
   for (int i = 0; i < size; i++)
   {
      if (list[i] >= max)
      {
         max = list[i];
      }
   }
   return max;
}

int main()
{
   int size;
   scanf("%d", &size);
   int arr[size];
   for (int i = 0; i < size; i++)
   {
      scanf("%d", &arr[i]);
   }
   printf("%d", computeMax(arr, size));
   return 0;
}

e

#include "stdio.h"

/* ArrayMin
Create a program to read a variable number of elements, 
store them in the array a, passes a to the function computeMax which 
computes the maximun number iterating over the array, and then, the
 program prints the result of computeMax.
 */

int computeMin(int *list, int size)
{
   int min = list[0];
   for (int i = 0; i < size; i++)
   {
      if (list[i] <= min)
      {
         min = list[i];
      }
   }
   return min;
}

int main()
{
   int size;
   scanf("%d", &size);
   int arr[size];
   for (int i = 0; i < size; i++)
   {
      scanf("%d", &arr[i]);
   }
   printf("%d", computeMin(arr, size));
   return 0;
}

f

#include "stdio.h"

/* Median

 */

void arraySort(int *array, int size)
{
   int i = 0, j = 0, temp = 0;
   for (i = 0; i < size; i++)
   {
      for (j = 0; j < size - 1; j++)
      {
         if (array[j] > array[j + 1])
         {
            temp = array[j];
            array[j] = array[j + 1];
            array[j + 1] = temp;
         }
      }
   }
}

float findMedian(int array[], int size)
{
   float median = 0;
   if (size % 2 == 0)
      median = (array[(size - 1) / 2] + array[size / 2]) / 2.0;
   else
      median = array[size / 2];

   return median;
}

int main()
{
   int size;
   float median;
   scanf("%d", &size);
   int arr[size];
   for (int i = 0; i < size; i++)
   {
      scanf("%d", &arr[i]);
   }
   arraySort(arr, size);
   median = findMedian(arr, size);
   printf("%.1f", median);
   return 0;
}

G

#include <stdio.h>

void swap(int *a, int *b)
{
   int temp = *a;
   *a = *b;
   *b = temp;
}

void selectionSort(int arr[], int size)
{
   int i, j, min_idx;
   for (i = 0; i < size - 1; i++)
   {
      min_idx = i;
      for (j = i + 1; j < size; j++)
         if (arr[j] < arr[min_idx])
            min_idx = j;
      swap(&arr[min_idx], &arr[i]);
   }
}

int searchValue(int list[], int left, int right, int x)
{
   if (right >= left)
   {
      int mid = left + (right - left) / 2;
      if (list[mid] == x)
         return mid;
      if (list[mid] > x)
         return searchValue(list, left, mid - 1, x);
      return searchValue(list, mid + 1, right, x);
   }
   return -1;
}
int main()
{
   int size, value;
   scanf("%d\n%d", &size, &value);
   int arr[size];
   for (int i = 0; i < size; i++)
   {
      scanf("%d", &arr[i]);
   }
   selectionSort(arr, size);
   printf("%d", searchValue(arr, 0, size - 1, value));
   return 0;
}

h


#include <stdio.h>

void swap(int *a, int *b)
{
   int temp = *a;
   *a = *b;
   *b = temp;
}

void bubbleSort(int arr[], int size)
{
   int i, j;
   for (i = 0; i < size - 1; i++)
      for (j = 0; j < size - i - 1; j++)
         if (arr[j] > arr[j + 1])
            swap(&arr[j], &arr[j + 1]);
}

void printArray(int arr[], int size) 
{ 
    int i; 
    for (i=0; i < size; i++) 
        printf("%d ", arr[i]); 
    printf("\n"); 
} 

int main()
{
   int size;
   scanf("%d", &size);
   int arr[size];
   for (int i = 0; i < size; i++)
   {
      scanf("%d", &arr[i]);
   }
   bubbleSort(arr, size);
   printArray(arr, size);
   return 0;
}



#include <stdio.h>

int computeMin(int *list, int size)
{
   int min = list[0];
   for (int i = 0; i < size; i++)
   {
      if (list[i] <= min)
      {
         min = list[i];
      }
   }
   return min;
}

int computeMax(int *list, int size)
{
   int max = list[0];
   for (int i = 0; i < size; i++)
   {
      if (list[i] >= max)
      {
         max = list[i];
      }
   }
   return max;
}


void main()
{
   int size, min, max;
   scanf("%d", &size);
   int arr[size];
   for (int i = 0; i < size; i++)
   {
      scanf("%d", &arr[i]);
   }
   min = computeMin(arr, size);
   max = computeMax(arr, size);
   printf("%d", max - min + 1);
}


#include <stdio.h>

int countInRange(int *list, int size, int min, int max)
{
   int count = 0;
   for (int i = 0; i < size; i++)
   {
      if (list[i] >= min && max >= list[i])
      {
         count++;
      }
   }
   return count;
}

void main()
{
   int size, min, max;
   scanf("%d\n%d\n%d", &min, &max, &size);
   int arr[size];
   for (int i = 0; i < size; i++)
   {
      scanf("%d", &arr[i]);
   }
   printf("%d", countInRange(arr, size, min, max));
}


#include <stdio.h>

int priceIsRight(int *list, int size, int price)
{
   int flag = -1;
   int n = 0;
   while (n < size)
   {
      if (list[n] <= price)
      {
         if (flag == -1 || (price - flag) > (price - list[n]))
         {
            flag = list[n];
         }
      }
      n++;
   }
   return flag;
}

void main()
{
   int price, size;
   scanf("%d\n%d", &price, &size);
   int arr[size];
   for (int i = 0; i < size; i++)
   {
      scanf("%d", &arr[i]);
   }
   printf("%d", priceIsRight(arr, size, price));
}


#include <stdio.h>

void isMagicSquare(int *list, int size, int length)
{
   int lineSum = 0;
   int horizontal = 0;
   for (int i = 0; i < length; i++)
   {
      lineSum += list[i];
   }
   for (int i = 0; i < size; i++)
   {
      horizontal += list[i];
   }
   if (horizontal % lineSum == 0)
   {
      printf("true");
   }
   else
   {
      printf("false");
   }
}
void main()
{
   int length, size;
   scanf("%d", &length);
   size = length * length;
   int arr[size];
   for (int i = 0; i < size; i++)
   {
      scanf("%d", &arr[i]);
   }
   isMagicSquare(arr, size, length);
}



#include <stdio.h>
#include <stdbool.h>
#include <string.h>

void SieveOfEratosthenes(int n)
{
   bool primes[n + 1];
   memset(primes, true, sizeof(primes));

   for (int p = 2; p * p <= n; p++)
   {
      if (primes[p] == true)
      {
         for (int i = p * p; i <= n; i += p)
            primes[i] = false;
      }
   }

   for (int p = 2; p <= n; p++)
      if (primes[p])
         printf("%d ", p);
         printf("\n");
}

// Driver Program to test above function
int main()
{
   int num;
    scanf("%d", &num);
   SieveOfEratosthenes(num);
   return 0;
}